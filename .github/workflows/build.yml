name: Build NGINX Unit with PHP Support

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 120 # Increase this as needed
    strategy:
      matrix:
        php_version: ['7.4', '8.0', '8.1', '8.2'] # Add other PHP versions here if needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt update -qq
        sudo apt install -y software-properties-common git build-essential libssl-dev libpcre2-dev ca-certificates apt-transport-https debian-archive-keyring
        sudo add-apt-repository -y ppa:ondrej/php
        sudo apt-get update -qq
        sudo apt-get install -y libphp${{ matrix.php_version }}-embed php${{ matrix.php_version }}-dev php${{ matrix.php_version }}

    - name: Set UNITTMP environment variable
      run: echo "UNITTMP=${{ github.workspace }}/unit_temp" >> $GITHUB_ENV

    - name: Create a staging directory for the package
      run: mkdir -p $UNITTMP/unit-php${{ matrix.php_version }}/DEBIAN

    - name: Create DEBIAN/control file
      run: |
        cat <<EOL > $UNITTMP/unit-php${{ matrix.php_version }}/DEBIAN/control
        Package: unit-php${{ matrix.php_version }}
        Version: 1.30.0-1~jammy
        Architecture: amd64
        Depends: unit (>= 1.30.0), php${{ matrix.php_version }}, libphp${{ matrix.php_version }}-embed
        Maintainer: Viorel-Cosmin Miron <cosmin@uhl-services.ch>
        Description: Custom PHP ${{ matrix.php_version }} language module for NGINX Unit 1.30.0
        EOL

    - name: Build NGINX Unit with PHP ${{ matrix.php_version }} support
      run: |
        git clone https://github.com/nginx/unit.git
        cd unit
        git checkout tags/1.30.0 -b 1.30.0
        ./configure --prefix=/usr --statedir=/var/lib/unit --control=unix:/var/run/control.unit.sock --pid=/var/run/unit.pid --log=/var/log/unit.log --tmpdir=/var/tmp --user=unit --group=unit --tests --openssl --modulesdir=/usr/lib/unit/modules --libdir=/usr/lib/x86_64-linux-gnu --cc-opt='-g -O2 -fdebug-prefix-map=/data/builder/debuild/unit-1.30.0/pkg/deb/debuild/unit-1.30.0=. -specs=/usr/share/dpkg/no-pie-compile.specs -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC'
        ./configure php --module=php${{ matrix.php_version }} --config=php-config${{ matrix.php_version }}
        make php${{ matrix.php_version }}
        mkdir -p $UNITTMP/unit-php${{ matrix.php_version }}/DEBIAN
        mv build/lib/unit/modules/php${{ matrix.php_version }}.unit.so $UNITTMP/unit-php${{ matrix.php_version }}/DEBIAN

    - name: Build and install DEBIAN package
      run: |
        dpkg-deb -b $UNITTMP/unit-php${{ matrix.php_version }} $UNITTMP/unit-php${{ matrix.php_version }}.deb
        sudo dpkg -i $UNITTMP/unit-php${{ matrix.php_version }}.deb

    - name: Verify the installed packages
      run: dpkg -l | grep unit-php${{ matrix.php_version }}

    - name: Create Release and Upload Package
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Default token provided by GitHub

    - name: Upload Package
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: $UNITTMP/unit-php${{ matrix.php_version }}.deb
        asset_name: unit-php${{ matrix.php_version }}.deb
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Same token as used for creating the release




